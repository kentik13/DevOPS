K8s objects:
0.container
1.pods - one or few (same or different)containers (the smallest peace)
2.deployment - one or few same pod's (for auto scaling, hold minimal active pods inside)
3.service - give access to pod what should go to deployment 
4.nodes - server(one node one server) (cluster ip,Nodeport,loadbalacner,externalname)
5.cluster - one or few nodes inside

===================Commands=================
PODS:
kubectl get pods - show all pods
kubectl run hello --image=nginx:latest --port=80 
kubectl run hello  --image=kentik13/k8sphp:latest --port=80
kubectl get nodes - show all nodes
kubectl delete pods hello - delete hello pod
kubectl describe pods hello - get info about pod hello
kubectl exec hello date - run command date on pod hello
kubectl exec -it hello sh - run shell in interactive mode
kubectl logs hello - show log hello pod
kubectl port-forward hello 7777:80 - port 7777 our pc to 80 port
kubectl apply -f myfile.yaml    Create objects K8s from manifest file myfile.yaml
kubectl delete -f myfile.yaml   Delete objects K8s from manifest file myfile.yaml

INFO: can be chaned "image: nginx:latest" to other inside yaml file and to apply need to run "kubectl apply -f myfile.yaml" again   

DEPLOYMENT:
minikube start --cpus=4 --memory=4gb --disk-size=20gb --driver=docker --nodes 2  - minukube with 2 nodes
kubectl get deployments  - show all Depoyments

kubectl create deployment anton-deployment --image nginx:latest - create Deployment form DockeImage nginx:latest

kubectl describe deployment anton-deployment
kubectl scale deployment anton-deployment --replicas 4  - Create ReplicaSets
kubectl get rs - show add ReplicaSets (after creation of replicas)
kubectl autoscale deployment anton --min=2 --max=4 --cpu-percent=80 - create AutoScaling for Deployment anton
kubectl get hpa - Show all HPA - HorizontalAutoScalers
kubectl rollout history deployment/anton-deployment - show update history
kubectl rollout status deployment/anton-deployment - show rollout update status
kubectl set image deployment/anton-deployment k8sphp=kentik13/k8sphp:version1 --record   - chenge Deployment anton-deployment Image (k8sphp) on new (kentik13/k8sphp:version1)
kubectl rollout undo deployment/anton-deployment  -  back on previous version
kubectl rollout undo deployment/anton-deployment --to-revision=2  - back on 2 version(what we set)
kubectl rollout restart deployment/anton-deployment  - update to fresh version
kubectl delete deployments denis-deployment    - Delete Deployment anton-deployment 
kubectl port-forward my-web-deployment-replicas-774cbd7c7c-ftpjp 7777:80 - check replica port is works
kubectl apply -f .\deployment-2-replicas.yaml - make deployment from file


SERVICES:
ClusterIP - get ip inside k8s cluster
NodePort - open port on all k8s worker nodes
ExternalName - DNS CNAME Record
LoadBalancer - only in AWS,GCP,Azure

kubectl expose deployment anton-deployment --type=ClusterIP --port 80  - Create Service with type ClusterIP for Deployment
kubectl get services  -  Show all Services
kubectl get svc -  Show all Services
kubectl delete services  anton-deployment -  delete Service anton-deployment

kubectl expose deployment anton-deployment --type=NodePort --port 80  -  create Service with type NodePort for Deployment

kubectl expose deployment anton-deployment --type=LoadBalancer --port 80  -  create Service with LoadBalancer  for Deployment

kubectl describe nodes | grep ExternalIP - find External IP on all Worker nodes

Scale Deployments:
kubectl scale deployment main    --replicas 2   Create ReplicaSets
kubectl scale deployment web1    --replicas 2   Create ReplicaSets
kubectl scale deployment web2    --replicas 2   Create ReplicaSets
kubectl expose deployment main   --port 80   # --type=ClusterIP  DEFAULT   - Create Service, by default type=ClusterIP
kubectl expose deployment web1   --port 80  - by default type=ClusterIP
kubectl expose deployment web2   --port 80   - by default type=ClusterIP
kubectl expose deployment tomcat --port 8080    -  by default type=ClusterIP
kubectl get services -o wide   - Check data of Services
kubectl apply -f ingress-hosts.yaml -Create Ingress Rules from file
kubectl apply -f ingress-paths.yaml -Create Ingress Rules from file
kubectl get ingress             -Show all Ingress Rules
kubectl describe ingress    -Show all Ingress Rules detailed
kubectl delete ns projectcontour    -remove Ingress Controller Contour


HELM CHARTS:

helm version        -show version Helm
helm list           -show all deployed Helm Releases
helm search hub     -show Helm Chart from global list Hub
helm search repo    -show Helm Chart from added Repos
helm install app1 Chart-Anton/  -deploy Helm Chart app1 from directory Chart-Anton
helm upgrade app1 Chart-Anton/ --set container.image=kentik13/k8sphp:version1    -update deployment app1
helm create MyChart  -Create default Helm Chart in directory MyChart
helm package Denis-Chart/   -Pack Helm Chart in tgz achive
helm install app2 App-HelmChart-0.1.0.tgz   - Deploy Helm Chart app2 from archive
helm delete app1    -Delete Deployment Helm Chart app1
helm uninstall app1 -Delete Deployment Helm Chart app1
helm repo add bitnami https://charts.bitnami.com/bitnami    -add Helm Chart Repo from bitnami
helm install my_website bitnami/apache -f my_values.yaml    -deploy Helm Chart bitnami/apache with custom values
